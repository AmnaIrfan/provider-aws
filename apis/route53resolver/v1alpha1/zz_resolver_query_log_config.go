/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ResolverQueryLogConfigParameters defines the desired state of ResolverQueryLogConfig
type ResolverQueryLogConfigParameters struct {
	// Region is which region the ResolverQueryLogConfig will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A unique string that identifies the request and that allows failed requests
	// to be retried without the risk of executing the operation twice. CreatorRequestId
	// can be any unique string, for example, a date/time stamp.
	// +kubebuilder:validation:Required
	CreatorRequestID *string `json:"creatorRequestID"`
	// The ARN of the resource that you want Resolver to send query logs. You can
	// send query logs to an S3 bucket, a CloudWatch Logs log group, or a Kinesis
	// Data Firehose delivery stream. Examples of valid values include the following:
	//
	//    * S3 bucket: arn:aws:s3:::examplebucket You can optionally append a file
	//    prefix to the end of the ARN. arn:aws:s3:::examplebucket/development/
	//
	//    * CloudWatch Logs log group: arn:aws:logs:us-west-1:123456789012:log-group:/mystack-testgroup-12ABC1AB12A1:*
	//
	//    * Kinesis Data Firehose delivery stream: arn:aws:kinesis:us-east-2:0123456789:stream/my_stream_name
	// +kubebuilder:validation:Required
	DestinationARN *string `json:"destinationARN"`
	// The name that you want to give the query logging configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// A list of the tag keys and values that you want to associate with the query
	// logging configuration.
	Tags                                   []*Tag `json:"tags,omitempty"`
	CustomResolverQueryLogConfigParameters `json:",inline"`
}

// ResolverQueryLogConfigSpec defines the desired state of ResolverQueryLogConfig
type ResolverQueryLogConfigSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ResolverQueryLogConfigParameters `json:"forProvider"`
}

// ResolverQueryLogConfigObservation defines the observed state of ResolverQueryLogConfig
type ResolverQueryLogConfigObservation struct {
	// The ARN for the query logging configuration.
	ARN *string `json:"arn,omitempty"`
	// The number of VPCs that are associated with the query logging configuration.
	AssociationCount *int64 `json:"associationCount,omitempty"`
	// The date and time that the query logging configuration was created, in Unix
	// time format and Coordinated Universal Time (UTC).
	CreationTime *string `json:"creationTime,omitempty"`
	// The ID for the query logging configuration.
	ID *string `json:"id,omitempty"`
	// The AWS account ID for the account that created the query logging configuration.
	OwnerID *string `json:"ownerID,omitempty"`
	// An indication of whether the query logging configuration is shared with other
	// AWS accounts, or was shared with the current account by another AWS account.
	// Sharing is configured through AWS Resource Access Manager (AWS RAM).
	ShareStatus *string `json:"shareStatus,omitempty"`
	// The status of the specified query logging configuration. Valid values include
	// the following:
	//
	//    * CREATING: Resolver is creating the query logging configuration.
	//
	//    * CREATED: The query logging configuration was successfully created. Resolver
	//    is logging queries that originate in the specified VPC.
	//
	//    * DELETING: Resolver is deleting this query logging configuration.
	//
	//    * FAILED: Resolver can't deliver logs to the location that is specified
	//    in the query logging configuration. Here are two common causes: The specified
	//    destination (for example, an Amazon S3 bucket) was deleted. Permissions
	//    don't allow sending logs to the destination.
	Status *string `json:"status,omitempty"`
}

// ResolverQueryLogConfigStatus defines the observed state of ResolverQueryLogConfig.
type ResolverQueryLogConfigStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ResolverQueryLogConfigObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// ResolverQueryLogConfig is the Schema for the ResolverQueryLogConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ResolverQueryLogConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverQueryLogConfigSpec   `json:"spec,omitempty"`
	Status            ResolverQueryLogConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverQueryLogConfigList contains a list of ResolverQueryLogConfigs
type ResolverQueryLogConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResolverQueryLogConfig `json:"items"`
}

// Repository type metadata.
var (
	ResolverQueryLogConfigKind             = "ResolverQueryLogConfig"
	ResolverQueryLogConfigGroupKind        = schema.GroupKind{Group: Group, Kind: ResolverQueryLogConfigKind}.String()
	ResolverQueryLogConfigKindAPIVersion   = ResolverQueryLogConfigKind + "." + GroupVersion.String()
	ResolverQueryLogConfigGroupVersionKind = GroupVersion.WithKind(ResolverQueryLogConfigKind)
)

func init() {
	SchemeBuilder.Register(&ResolverQueryLogConfig{}, &ResolverQueryLogConfigList{})
}
